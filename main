# Pong in Python 3
# Craig Spreeman

import pygame
import random
from game_state import GameState
import sys

# general setup
pygame.init()
clock = pygame.time.Clock()
current_state = GameState.Serve

# setting up main window
screen_width = 1280
screen_height = 960
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Pong')

# game rectangles
ball = pygame.Rect(screen_width / 2 - 15, screen_height / 2 - 15, 30, 30)
player1 = pygame.Rect(10, screen_height / 2 - 70, 10, 140)
player2 = pygame.Rect(screen_width - 20, screen_height / 2 - 70, 10, 140)

bg_color = pygame.Color('grey12')
light_grey = (200, 200, 200)
game_font = pygame.font.SysFont(pygame.font.get_fonts()[0], 32)
menu_font = pygame.font.SysFont(pygame.font.get_fonts()[0], 64)

ball_speed_x = 0
ball_speed_y = 0
player1_speed = 0
player2_speed = 0

player1_score = 0
player2_score = 0


def game_over():
    global current_state

    score_reset()
    current_state = GameState.Serve


def score_reset():
    global player1_score, player2_score
    player1_score = 0
    player2_score = 0


def player_control():
    global player1_speed
    global player2_speed

    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_s:
            player1_speed += 7
        if event.key == pygame.K_w:
            player1_speed -= 7

        if event.key == pygame.K_DOWN:
            player2_speed += 7
        if event.key == pygame.K_UP:
            player2_speed -= 7

    if event.type == pygame.KEYUP:
        if event.key == pygame.K_s:
            player1_speed -= 7
        if event.key == pygame.K_w:
            player1_speed += 7

        if event.key == pygame.K_DOWN:
            player2_speed -= 7
        if event.key == pygame.K_UP:
            player2_speed += 7


def player_animation():
    if player1.top <= 0:
        player1.top = 0
    elif player1.bottom >= screen_height:
        player1.bottom = screen_height

    if player2.top <= 0:
        player2.top = 0
    elif player2.bottom >= screen_height:
        player2.bottom = screen_height

    player1.y += player1_speed
    player2.y += player2_speed


def ball_restart():
    global ball_speed_x, ball_speed_y, current_state

    ball_speed_x = 0
    ball_speed_y = 0
    ball.center = (screen_width / 2, screen_height / 2)
    if player1_score >= 3 or player2_score >= 3:
        game_over()
    else:
        current_state = GameState.Serve


def ball_serve():
    global ball_speed_x, ball_speed_y
    ball_speed_x = 5
    ball_speed_y = 5
    ball_speed_y *= random.choice((1, -1))
    ball_speed_x *= random.choice((1, -1))


def ball_animation():
    global ball_speed_x, ball_speed_y, player1_score, player2_score

    # set ball speed
    ball.x += ball_speed_x
    ball.y += ball_speed_y

    # if top or bottom of ball hit screen height min/max, reverse
    if ball.top <= 0 or ball.bottom >= screen_height:
        ball_speed_y *= -1

    # if left or right of ball hit screen width min/max, reverse
    if ball.left <= 0:
        player2_score += 1
        ball_restart()

    if ball.right >= screen_width:
        player1_score += 1
        ball_restart()

    # if call collides with player rectangles (paddles), reverse
    if ball.colliderect(player1) or ball.colliderect(player2):
        ball_speed_x *= -1
        ball_speed_y += 1
        if ball_speed_x > 0:
            ball_speed_x += 1
        else:
            ball_speed_x -= 1


while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        player_control()

    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_RETURN and current_state == GameState.Serve:
            current_state = GameState.InPlay
            ball_serve()

    ball_animation()
    player_animation()

    # background color
    screen.fill(bg_color)

    # drawing
    pygame.draw.rect(screen, light_grey, player1)
    pygame.draw.rect(screen, light_grey, player2)
    pygame.draw.ellipse(screen, light_grey, ball)

    # draw Anti-Aliasing line
    pygame.draw.aaline(screen, light_grey, (screen_width / 2, 0), (screen_width / 2, screen_height))

    player1_text = game_font.render(f"{player1_score}", False, light_grey)
    screen.blit(player1_text, (660, 463))
    player2_text = game_font.render(f"{player2_score}", False, light_grey)
    screen.blit(player2_text, (600, 463))

    if current_state == GameState.Serve:
        menu_text = menu_font.render(f"Press enter to Serve!", False, light_grey)
        screen.blit(menu_text, menu_text.get_rect(center=(screen_width / 2, screen_height / 4)))

    # update display
    pygame.display.flip()
    clock.tick(60)
